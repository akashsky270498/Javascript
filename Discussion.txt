Q-1: What is event Loop?
Ans: Event loop is a mechanism a JS which is used to handle async operaions. Insted of blocking the whole porgram while waiting for the longer tasks like reading the file or DB queries, Nodejs uses event loop to handle them on background while continue running the other parts of the code. This makes JS efficient & non-blocking.
- Event checks if the CallStack is empty, if so it picks the tasks from CallBack Queue or Priority Queue and place them in CallStack.

Q-2: What is process.NextTick(), setImmediate() & setTimeout()?
Ans: 
- process.NextTick(): process.NextTick() runs immediately after the current function finishes it;'s execution, before anything else(Timers & I/O).
- setImmediate(): setImmediate() runs after the current I/O event completes, in the next round of the event loop.
- setTimeout(): setTimeout() runs after specified delay.

Q-3: What is Promise? What is Promise.all() & Promise.allSettled()?
Ans: Promise is an object, Promise reprents future results of an async operations. We have 3 states in promise:-
- pending, fullfilled, rejected.
- Promise.all(): resolves when all the promises succeed, rejects if any failed. (used to handle multiple API's at same time.)
- Promise.allSettled(): resolves when all the promises are settled, regardless of success & failure.

Q-4: What are Streams?
Ans: Streams are object in JS that are used to read & write the data piece by piece in chunks instead of loading them all into the memory at once it improve the performance for large files. Reading large CSV files & for uploading files on AWS s3.
-Buffer is a store in memory which is used to store raw data files like images, files or network data. So that nodejs can process it efficiently, especially when data arrives in Chunks.

Q-5: What is Middleware?
Ans: Middleware in expressJs is a function that runs before the request reaches to the controller. It is used for Authentication, Error handling, Logs etc.

app.use((req, res, next) => {
    console.log("Req: ", req);
    next();
})

Q-6: What is app.use() & app.get()?
Ans:
-app.use(): app.use() is used to handle all the HTTP methods and use for applying middlewares also.
-app.get(): app.get() is used to handle only GEt requset for specific routes.

Q-7: How do you handle Global Error?
Ans: By using 4 params in middleware:

- app.use((req, res, next, err) => {
    res.status(errCode).json({ message: err.message });
})

Q-8: What is Rate Limiting? How you handle Rate Limiting and RBAC?
Ans: Rate limiting is a technique use to control the number of API requet client can make in a given time period.
Using express-rate-limiter && RBAC using custom middleware that check user role before accessing the routes.

Q-9: What is Idempotent API?
Ans: Idempotent APIs are those which return same results for same input, no matter how many many times that API get called (GET, PUT, DELETE).

Q-10: How to do you secure Apis using JWT & CORS?
Ans: Using Authorization Bearer headers,  CORS using cors package to verify the request of coming from the verified origin.

Q-11: When would you choose Redis over PostgreSQL?
Ans: When we want frequent access of any data.

Q-12: How to manage DB schema design in microservices?
Ans:-
- Seprate dB schema for each services.
- Define relations locally, avoid tight coupling.
- Use migrations like Sequelize or typeORM.

Q-13: How did Redis help in reducing response time in your app?
Ans: By caching frequently used data like (user profile, followers/followings), reducing DB calls.

Q-14: How did you implement WebSocket communication?
Ans: I implement web scokets communication using socket.io for managing connection rooms, emits, receive events.

Q-15: Describe your microservices setup in Talentprise
Ans: 
Services: Auth, Enterprise, Talent, Notification, Chat, Scoring, Matching, AI, Headhunter
Each services has its own DB schema & Git repo.
For communication we used gRPC. (Google Remote Procedure Calls)
Each services has its own CI/CD deployment.

Q-16: What happens if one microservice goes down?
Ans: Mostly that service will go down & not all the services.
- We must use retry logic, circuit braker(design pattern to enhance resiliance and fault tolerence) and logs.

Q-17: How did you integrate Zegocloud SDK in Taso?
Ans: 
- Used ther SDK in FE.
- From be issued access token and handled session logic.
- Managed events like Join, Leave & End via web socket.

Q-18:  Explain how you designed the email filtering logic in Thapala
Ans: 
- Used DB indexing (sender, subject & tags)
- Filtering at query level -> Select * from emails where tCode="***********" and tags LIKE "%S%"
- User specific role like if he/she is blocked he should not come  .

Q-19: Why did you use signed URLs for S3 and Azure Blob?
Ans:
- Bcoz of security reason.
- Prevent the bucket from direct access.
- Also reduces the load on BE.

// Middleware to log request IP, URL, and time
app.use((req, res, next) => {
    console.log(`${req.ip}": ${req.method} ${req.originalUrl} ${Date.now()}`)
    next();
})

Q-20: How would you optimize a slow API?
Ans:
- Use Pagination.
- Optimize Db queries use indexing.
- Redis cache.
- Use async code.

Q-21: Did you write unit tests? If not, how do you ensure code reliability?
Ans: If no tests: manual testing via Postman, Swagger, logging, and by reproducing real user flows.

Q-22: How do you handle memory leaks in Node.js?
Ans: By monitoring memory usage and by avoiding Global variable and cleaning the Timers & Intervals.
->
setImmediate(() => {
    process.memoryUsage()
})

Q-23: What is PUT & PATCH?
Ans: PUT -> update the entire data | PATCH -> update the required data.

Q-24: What is Access and refresh Token?
Ans:
- accessToken: The access token is a short-lived token used to access protected routes or APIs.It is sent with every API request in the headers (usually as a Bearer token) to verify user identity        
- refreshToken:The refresh token is a long-lived token used to obtain a new access token when the old one expires.It is not sent with every API request, usually stored securely in HttpOnly cookies, and helps avoid forcing the user to log in again.

Q-25: How do you store tokens securely on the client side?
Ans:HttpOnly cookie to avoid xss attack (accesstoken) db (refreshtoken)

Q-26: How do you handle errors from DB or async operations?
Ans: Using try...catch block also I use winston to log errors and to hide it from the client.

Q-27: How do you handle a slow third-party API?
Ans: If the 3rd party API is getting slow I use:
- Timeout.
- Retry logic.
- Fallback or Error Handling.
- Caching if data is static.
- Proper logging and Monitoring.

Q-28: What would you do if your app starts throwing 500 errors in production?
Ans: 
- I will check the logs given by Winston trying to get & understand the stack trace errors.
- I will copy the cURL from production and check in my local or dev.
- I will check for dependencies.
- I will Rollback to previous commit or deployment if possible.
- If rollback isn't possible, I will go for Hotfix.

Q-29: What is Shallow & Deep copy?
Ans:
- Shallow copy means top level property will get copied also, if I'll make any changes in the copied object it will get update in the original object.
- Deep copy means copying all the property using JSON.parse(JSON.stringify(object)), & if I'll make any in the copied object it will not reflect on original object.

Q-30: What is Session Based Authentication & Token Based Authentication?
Ans:
1. SBA: In SBA the server will store the login information and share the cookie with the client to stay logged in.
2. TBA: In TBA the server will not store anything instead it will give one token that client after login, and the client must send that token with every request.

Q-31: What is JWT Commonly used?
Ans: JWT is commonly used as it is stateless(doesn't store in session info), self-contained(all info of the user) and easy to validate on the server making it scalable for distributed system.

Q-32: How you secure sensitive data in API?
Ans:
- Using HTTPS
- Input validation and Sanitization
- Authentication
- Authorization
- Secure headers
- Rate Limiting / Throtling
- Data Encryption 

Q-33: CI/CD??
Ans: CI/CD is the process where your code is automatically tested, build and deployed so that developers can push there changes faster and safely.
.yml file under .github/workflows folder
- npm run install
- npm run lint or test
- npm run build

Q-34: What is Docker?
Ans: Docker is a tool that lets u package your app and everything that needs to be into a small unit called container so that it can run anywhere, fast, safely and consistently

Q-35: What happens if you don’t await an async function?
Ans: We will get a Promise we may get the result we may not.

Q-36: What is Closure?
Ans:  A closure is a function that remembers the variables of it surrounding scope even if that scope has finished its execution.

Q-37: Why is Nodejs single threaded?
Ans: NodeJs is single threaded bcoz it uses an "Event Driven and Non-blocking" I/O model. This design helps them to handle many connections at the same time without creating a new thread for each one. This makes nodejs fast and efficient, especially for heavy I/O tasks like reading files, accessing DBs and calling APIs.

Q-38: Why did you choose microservices in your project?
Ans: We choose bcoz we have too many domains(Auth, Chat, Notification etc) and we want independent scaling & deployments.

Q-39: When we should avoid microservices?
Ans: When our requirement is small or when we have small teams or when we dont have enough resources for DevOps and network management. 

Q-40: How do services talk to each other?
Ans: Using REST (sync), message queues like Kafka/RabbitMQ(async) or gRPC for fast RPC-style communication.



Hey, I’m Akash Thakur — a backend-focused full stack developer with over 2.6 years of experience, mainly working with Node.js, Express.js, PostgreSQL, and SQL.
I’ve been working at Ahex Technologies, where I’ve led the backend development of products like Talentprise, Taso, and Thapala — implementing real-time features such as OTP-based login, rate limiting, and signed media uploads using AWS S3 and Azure Blob Storage.
I’m passionate about writing clean, maintainable code and optimizing API performance. I’ve also worked with Redis, upgraded microservice-based systems, and integrated GraphQL.
While I’m actively improving my frontend skills with React, my core strength lies in building robust, secure, and scalable backend systems.

