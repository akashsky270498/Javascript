1: [] == ![] ?
Ans: true, bcoz ![] -> false coerces to 0 and [] also coerces to 0 so 0 == 0 true.

2: Can await be used without async?
Ans: Yes, await can be used without async only in top-level ES6 Modules.
const fetchData = await fetch("https://jsonplaceholder.typicode.com/todos/1");
const data = await fetchData.json();

3: What does NaN === NaN return?
Ans: false.

4: Can you access this inside an arrow function?
Ans: Yes, we can but it is lexically bound (inherits from outer scope-> window).

5: var, let, const hoisting?
Ans: var is hoisted and initialized as undefined, let & const are also hoisted but they are in TDZ.

6: What happens if you return inside funally block?
Ans: It will overrides return from try...catch.

7: typeof NaN?
Ans: number

8: What if u dont call next() in middleware?
Ans: Request hangs (never reaches next middleware/handler).

9: What happens if you forget await in async?
Ans: Return a Promise, not the resolved value.

10: Does const make objects immutable?
Ans: No, only refrence is constant values/properties are mutable

11: What happens if u forget return inside async function?
Ans: It will return a promise, but the promise resolves to undefined.

12: What happens if you await a non-promise value?
Ans: It will auto-wraps it in a resolved promise -> await 5 = returns 5.

13: What happens if you call res.send() twice in express?
Ans: Throw error: Can't set headers after they are sent.

14: What happens if you call delete on array element?
Ans: Leaves a hole(empty solt), doesnot re-index array.
